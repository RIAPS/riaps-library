//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//

#ifndef RIAPS_CORE_MODBUSUART_H
#define RIAPS_CORE_MODBUSUART_H

#include <componentmodel/r_componentbase.h>
#include <messages/modbusuart.capnp.h>
#include <pybind11/pybind11.h>

// Name of the ports from the model file
constexpr auto PORT_REP_MODBUSREPPORT = "modbusRepPort";
constexpr auto PORT_TIMER_CLOCK       = "clock";

namespace py = pybind11;

namespace globals {
   namespace components {
      
      class ModbusUARTBase : public riaps::ComponentBase {
         
         public:
         ModbusUARTBase(const py::object *parent_actor,
                        const py::dict actor_spec,
                        const py::dict type_spec,
                        const std::string &name,
                        const std::string &type_name,
                        const py::dict args,
                        const std::string &application_name,
                        const std::string &actor_name);

         virtual void OnModbusRepPort(const modbusuart::messages::CommandFormat::Reader &message, riaps::ports::PortBase *port)=0;
         
         virtual bool SendModbusRepPort(capnp::MallocMessageBuilder& messageBuilder, modbusuart::messages::ResponseFormat::Builder& message);
         
         virtual void OnClock(riaps::ports::PortBase *port)=0;
         
         virtual ~ModbusUARTBase();
         protected:
         virtual void DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params=nullptr );
         virtual void DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port);
      };
   }
}
#endif //RIAPS_CORE_MODBUSUART_H
