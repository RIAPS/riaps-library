//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <base/ModbusUARTBase.h>
#include <componentmodel/r_pyconfigconverter.h>

namespace globals {
   namespace components {
      
      ModbusUARTBase::ModbusUARTBase(const py::object *parent_actor,
                                     const py::dict actor_spec,
                                     const py::dict type_spec,
                                     const std::string &name,
                                     const std::string &type_name,
                                     const py::dict args,
                                     const std::string &application_name,
                                     const std::string &actor_name) : ComponentBase(application_name, actor_name) {
          auto conf = PyConfigConverter::convert(type_spec, actor_spec);
          conf.component_name = name;
          conf.component_type = type_name;
          conf.isDevice=false;
          set_config(conf);
      }
      
      void ModbusUARTBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params) {
         auto portName = port->GetPortName();
         if (portName == PORT_REP_MODBUSREPPORT) {
            auto reader = capnpreader->getRoot<modbusuart::messages::CommandFormat>();
            OnModbusRepPort(reader, port);
         }
         
         if (portName == PORT_TIMER_CLOCK) {
            OnClock(port);
         }
         
      }
      
      void ModbusUARTBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool ModbusUARTBase::SendModbusRepPort(capnp::MallocMessageBuilder& messageBuilder,
                                             modbusuart::messages::ResponseFormat::Builder& message) {
         std::cout<< "ModbusUARTBase::SendModbusRepPort()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_REP_MODBUSREPPORT);
      }
      
      ModbusUARTBase::~ModbusUARTBase() {
         
      }
   }
}
