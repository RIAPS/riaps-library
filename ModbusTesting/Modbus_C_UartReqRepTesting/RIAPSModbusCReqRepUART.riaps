// RIAPS Modbus (UART) Device Testing

// Modbus (UART) device interface - UART2
// considered the server for the request/response interaction

app RIAPSModbusCReqRepUART
{
    message ModbusCommand;       // send Modbus action Request
    message ModbusResponse;      // get response from Modbus action
    message ModbusLogData;       // information for the logger to grab

    library libmodbus.so;        // third party library used for the libmodbusuart.so

    // Modbus (UART) device interface - UART2
    //     considered the server for the request/response interaction
    device ModbusUART (slaveaddress=10, port='UART2', baudrate=115200, numholdreg=3, numinputreg=4) in Cpp
    {
        rep modbusRepPort : (ModbusCommand,ModbusResponse);
        timer clock 10;
    }

    // Example Component to show Modbus I/F usage
    component ComputationalComponent() in Python
    {
        timer clock 4000;
        pub tx_modbusData : ModbusLogData ;                 // When data is ready,
        req modbusReqPort : (ModbusCommand,ModbusResponse); // Port used to communicate with the ModbusUartDevice
    }
    component Logger(db_host='127.0.0.1', db_port=8086, db_name='MOdbusIO', db_user='riaps', db_password='riaps') in Python
    {
        sub rx_modbusData : ModbusLogData;
    }

    actor ModbusLogger()
    {
        {
            logger : Logger(db_host='127.0.0.1', db_port=8086, db_name='ModbusIO', db_user='riaps', db_password='riaps');
        }
    }

    // Modbus Communication Example actor
    actor ModbusExampleActor()
    {
        local ModbusCommand,ModbusResponse; // Local message types
        {
            commInitiator : ComputationalComponent;
            modbusinstance : ModbusUART(slaveaddress=10, port='UART2', baudrate=115200, numholdreg=3, numinputreg=4)
        }
    }
}
