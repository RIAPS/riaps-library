// Use Modbus UART Device, log send/receive with LED
struct LogData
{ 
	msg: String;
}
message ModbusLogData : LogData;

app GPIOLoggedModbusAction
{ 
	// Example Component to show Modbus I/F usage
	component ComputationalComponent()
	{
		uses
		{
			device ModbusUART
		} 
		
		timer clock 4000;
        pub tx_modbusData : ModbusLogData ;                 // When data is ready,
        req modbusReqPort : (ModbusCommand,ModbusResponse); // Port used to communicate with the ModbusUartDevice
	}
	
//	component DataLogger(db_host='127.0.0.1', db_port=8086, db_name='MOdbusIO', db_user='riaps', db_password='riaps')
//	{
//		sub rx_modbusData : ModbusLogData;
//	}
	
	component VisualLogger()
	{
		uses
		{
			device GpioDevice
		}
		
		timer offTimer 1000;
		sub rx_modbusData : ModbusLogData;
    	req gpioReqPort : (GpioCommand, GpioResponse);
	}

//	actor ModbusLogger()
//	{
//		{
//			logger : DataLogger(db_host='127.0.0.1', db_port=8086, db_name='ModbusIO', db_user='riaps', db_password='riaps');
//		}
//	}

    
	// Modbus Communication Example actor
	actor ModbusExampleActor()
	{
		local ModbusCommand,ModbusResponse,GpioCommand,GpioResponse; // Local message types
		{
			commInitiator : ComputationalComponent;
			device modbusinstance : ModbusUART(slaveaddress=10, port='UART2', baudrate=115200, numholdreg=3, numinputreg=4)
			visualFeedback : VisualLogger;
			device gpioInstance : GpioDevice(bbb_pin_name='USR3', direction='OUT', pull_up_down='PUD_OFF', setup_delay=60)
		}
	}
}